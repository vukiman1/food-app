---
description: 
globs: 
alwaysApply: true
---
#  Food App - Project Rules & Conventions

##  Project Overview

**Food App** l√† m·ªôt ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i ƒë∆∞·ª£c x√¢y d·ª±ng b·∫±ng Next.js 15 v·ªõi App Router, cung c·∫•p tr·∫£i nghi·ªám kh√°m ph√° ·∫©m th·ª±c tuy·ªát v·ªùi. D·ª± √°n tu√¢n th·ªß ki·∫øn tr√∫c component-based v·ªõi server-side rendering v√† static generation.

### M·ª•c ti√™u d·ª± √°n
- T·∫°o n·ªÅn t·∫£ng chia s·∫ª v√† kh√°m ph√° m√≥n ƒÉn
- Cung c·∫•p giao di·ªán ng∆∞·ªùi d√πng th√¢n thi·ªán v√† responsive
- T·ªëi ∆∞u hi·ªáu su·∫•t v·ªõi Next.js App Router
- X√¢y d·ª±ng ki·∫øn tr√∫c code s·∫°ch v√† d·ªÖ b·∫£o tr√¨

##  Ki·∫øn tr√∫c d·ª± √°n

### C·∫•u tr√∫c th∆∞ m·ª•c
```
food-app/
‚îú‚îÄ‚îÄ public/                    # T√†i nguy√™n tƒ©nh
‚îÇ   ‚îú‚îÄ‚îÄ images/               # H√¨nh ·∫£nh m√≥n ƒÉn
‚îÇ   ‚îî‚îÄ‚îÄ icons/                # Icon v√† logo
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îî‚îÄ‚îÄ app/                  # Next.js App Router
‚îÇ       ‚îú‚îÄ‚îÄ components/       # Reusable components
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ main-header/  # Header component v·ªõi sub-components
‚îÇ       ‚îú‚îÄ‚îÄ meals/            # Trang danh s√°ch m√≥n ƒÉn
‚îÇ       ‚îú‚îÄ‚îÄ community/        # Trang c·ªông ƒë·ªìng
‚îÇ       ‚îú‚îÄ‚îÄ layout.js         # Root layout
‚îÇ       ‚îú‚îÄ‚îÄ page.js           # Trang ch·ªß
‚îÇ       ‚îú‚îÄ‚îÄ globals.css       # Global styles
‚îÇ       ‚îî‚îÄ‚îÄ page.module.css   # Homepage styles
‚îî‚îÄ‚îÄ package.json              # Dependencies v√† scripts
```

### C√¥ng ngh·ªá s·ª≠ d·ª•ng
- **Framework**: Next.js 15.3.4 (App Router)
- **Frontend**: React 19.0.0
- **Styling**: CSS Modules
- **Development**: Turbopack
- **Linting**: ESLint v·ªõi Next.js config
- **Git Hooks**: Husky

##  Coding Standards

### File Naming Conventions
- **Components**: `kebab-case` (e.g., `main-header.js`, `meal-card.js`)
- **CSS Modules**: `kebab-case.module.css` (e.g., `main-header.module.css`)
- **Pages**: `page.js` (Next.js App Router convention)
- **Directories**: `kebab-case` (e.g., `main-header/`, `meal-details/`)

### Code Naming Conventions
- **Components**: `PascalCase` (e.g., `MainHeader`, `MealCard`)
- **Functions**: `camelCase` (e.g., `getMealData`, `handleSubmit`)
- **Constants**: `UPPER_SNAKE_CASE` (e.g., `API_ENDPOINTS`, `MEAL_TYPES`)
- **CSS Classes**: `kebab-case` (e.g., `header-background`, `meal-card`)

### Component Structure
```javascript
// Template cho component m·ªõi
import classes from './component-name.module.css'

const ComponentName = ({ prop1, prop2 }) => {
  return (
    <div className={classes.container}>
      {/* Component content */}
    </div>
  )
}

export default ComponentName
```

### CSS Module Conventions
```css
/* component-name.module.css */
.container {
  /* Main container styles */
}

.container:hover {
  /* Hover states */
}

.container .child-element {
  /* Nested selectors */
}

/* Responsive design */
@media (max-width: 768px) {
  .container {
    /* Mobile styles */
  }
}
```

##  Design System

### M√†u s·∫Øc ch·ªß ƒë·∫°o
```css
:root {
  --primary-color: #f4ce14;      /* V√†ng ·∫•m */
  --secondary-color: #495e57;    /* Xanh l√° ƒë·∫≠m */
  --background-color: #ffffff;   /* Tr·∫Øng */
  --text-color: #333333;         /* X√°m ƒë·∫≠m */
  --accent-color: #8f3a09;       /* Cam ƒë·∫≠m */
  --light-gray: #f5f5f5;         /* X√°m nh·∫°t */
}
```

### Typography
- **Font ch√≠nh**: Geist (t·ªëi ∆∞u b·ªüi Next.js)
- **Font weights**: 400 (normal), 600 (semibold), 700 (bold)
- **Line heights**: 1.5 (body), 1.2 (headings)

### Spacing System
```css
:root {
  --spacing-xs: 0.25rem;   /* 4px */
  --spacing-sm: 0.5rem;    /* 8px */
  --spacing-md: 1rem;      /* 16px */
  --spacing-lg: 1.5rem;    /* 24px */
  --spacing-xl: 2rem;      /* 32px */
  --spacing-2xl: 3rem;     /* 48px */
}
```

## üîß Development Workflow

### Scripts c√≥ s·∫µn
```json
{
  "dev": "next dev --turbopack",    // Development v·ªõi Turbopack
  "build": "next build",            // Build production
  "start": "next start",            // Ch·∫°y production server
  "lint": "next lint"               // Ki·ªÉm tra code quality
}
```

### Git Workflow
- **Branch naming**: `feature/description`, `bugfix/description`
- **Commit convention**: Conventional Commits
  - `feat:` - New features
  - `fix:` - Bug fixes
  - `docs:` - Documentation
  - `style:` - Code style changes
  - `refactor:` - Code refactoring
  - `test:` - Adding tests
  - `chore:` - Maintenance tasks

### Pre-commit Hooks
- ESLint checking
- Code formatting
- Type checking (n·∫øu s·ª≠ d·ª•ng TypeScript)

## üì± Responsive Design

### Breakpoints
```css
/* Mobile first approach */
/* Base styles for mobile */

/* Tablet */
@media (min-width: 768px) {
  /* Tablet styles */
}

/* Desktop */
@media (min-width: 1024px) {
  /* Desktop styles */
}

/* Large Desktop */
@media (min-width: 1440px) {
  /* Large desktop styles */
}
```

### Component Responsive Patterns
```css
.container {
  padding: var(--spacing-md);
  max-width: 100%;
}

@media (min-width: 768px) {
  .container {
    padding: var(--spacing-lg);
    max-width: 768px;
    margin: 0 auto;
  }
}

@media (min-width: 1024px) {
  .container {
    max-width: 1024px;
  }
}
```

## üöÄ Performance Best Practices

### Next.js Optimizations
- S·ª≠ d·ª•ng `next/image` cho image optimization
- S·ª≠ d·ª•ng `next/font` cho font optimization
- Implement proper loading states
- Use Server Components khi c√≥ th·ªÉ
- Implement proper caching strategies

### Code Splitting
```javascript
// Dynamic imports cho code splitting
import dynamic from 'next/dynamic'

const DynamicComponent = dynamic(() => import('./HeavyComponent'), {
  loading: () => <p>Loading...</p>,
  ssr: false
})
```

### Bundle Optimization
- Tree shaking t·ª± ƒë·ªông
- Lazy loading cho components
- Optimize third-party libraries
- Monitor bundle size

##  Testing Strategy

### Unit Testing
- Jest + React Testing Library
- Test components v√† utility functions
- Mock external dependencies
- Test user interactions

### Integration Testing
- Test component interactions
- Test data flow
- Test API integrations

### E2E Testing
- Playwright ho·∫∑c Cypress
- Test user journeys
- Cross-browser testing

## üîí Security Best Practices

### Input Validation
- Validate t·∫•t c·∫£ user inputs
- Sanitize data tr∆∞·ªõc khi render
- Use proper HTML escaping

### Environment Variables
```javascript
// .env.local
NEXT_PUBLIC_API_URL=https://api.example.com
DATABASE_URL=your_database_url
SECRET_KEY=your_secret_key
```

### Security Headers
```javascript
// next.config.mjs
const nextConfig = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
        ],
      },
    ]
  },
}
```

## üìä Monitoring & Analytics

### Performance Monitoring
- Core Web Vitals tracking
- Bundle size monitoring
- Error tracking v·ªõi Sentry
- User experience metrics

### Analytics
- Google Analytics 4
- Custom event tracking
- User behavior analysis

## üéØ Common Patterns

### Page Component Pattern
```javascript
// app/meals/page.js
import MealList from '@/components/meals/MealList'
import { getMeals } from '@/lib/api'

export default async function MealsPage() {
  const meals = await getMeals()
  
  return (
    <main className="container">
      <h1>Our Delicious Meals</h1>
      <MealList meals={meals} />
    </main>
  )
}
```

### Layout Component Pattern
```javascript
// app/layout.js
import { Inter } from 'next/font/google'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Food App - Discover Amazing Meals',
  description: 'Explore delicious recipes and food experiences',
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>
        {children}
      </body>
    </html>
  )
}
```

### Component Composition Pattern
```javascript
// components/meals/MealCard.js
import classes from './MealCard.module.css'
import Image from 'next/image'

const MealCard = ({ meal }) => {
  return (
    <article className={classes.card}>
      <div className={classes.imageContainer}>
        <Image 
          src={meal.image} 
          alt={meal.name}
          width={300}
          height={200}
          className={classes.image}
        />
      </div>
      <div className={classes.content}>
        <h3 className={classes.title}>{meal.name}</h3>
        <p className={classes.description}>{meal.description}</p>
      </div>
    </article>
  )
}

export default MealCard
```

##  State Management

### Local State
- Use React hooks (`useState`, `useEffect`)
- Custom hooks cho reusable logic
- Context API cho global state

### Data Fetching
- Server Components cho initial data
- Client Components cho interactive data
- SWR ho·∫∑c React Query cho caching

## üìà SEO & Accessibility

### SEO Best Practices
- Proper metadata configuration
- Structured data markup
- Sitemap generation
- Open Graph tags

### Accessibility (a11y)
- Semantic HTML elements
- ARIA labels v√† roles
- Keyboard navigation
- Color contrast compliance
- Screen reader support

## üöÄ Deployment

### Vercel (Recommended)
- Automatic deployments
- Preview deployments
- Environment variables
- Performance monitoring

### Build Optimization
```javascript
// next.config.mjs
const nextConfig = {
  experimental: {
    turbo: {
      rules: {
        '*.svg': {
          loaders: ['@svgr/webpack'],
          as: '*.js',
        },
      },
    },
  },
  images: {
    domains: ['your-image-domain.com'],
  },
}
```

---

**L∆∞u √Ω**: Project rules n√†y s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t th∆∞·ªùng xuy√™n khi d·ª± √°n ph√°t tri·ªÉn. H√£y ƒë·∫£m b·∫£o tu√¢n th·ªß c√°c conventions n√†y ƒë·ªÉ maintain code quality!
