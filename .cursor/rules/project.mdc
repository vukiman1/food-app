---
description: 
globs: 
alwaysApply: true
---
# Food App - Cursor Rules & Project Intelligence

## 🎯 Project Context

**Food App** là một platform chia sẻ và khám phá ẩm thực được xây dựng với Next.js 15 App Router. Dự án đang trong giai đoạn phát triển ban đầu (25% hoàn thành) với foundation tốt nhưng cần hoàn thiện core features.

### Current Status
- ✅ Navigation system & basic routing
- ✅ Homepage với hero section
- ✅ Design system foundation
- 🚧 Meals page (placeholder only)
- 🚧 Community features
- 🚧 Share meal functionality
- ❌ Database integration
- ❌ Meal management components

## 🏗️ Technical Architecture

### Tech Stack
- **Framework**: Next.js 15.3.4 (App Router)
- **React**: 19.0.0
- **Styling**: CSS Modules
- **Development**: Turbopack
- **Fonts**: Google Fonts (Quicksand + Montserrat)
- **Quality**: ESLint + Husky

### Key Design Decisions
1. **App Router**: Sử dụng Next.js 15 App Router cho file-based routing
2. **CSS Modules**: Component-scoped styling
3. **Dark Theme**: `radial-gradient(#282c34, #282c34)` background
4. **Gradient Branding**: Orange-yellow gradient `linear-gradient(90deg, #f9572a, #ffc905)`
5. **Font Strategy**: Quicksand (body) + Montserrat (headings)

## 📁 File Structure Patterns

### Component Organization
```
src/app/components/
├── main-header/
│   ├── main-header.js
│   ├── main-header.module.css
│   ├── main-header-background.js
│   └── main-header-background.module.css
```

### Page Structure
```
src/app/
├── page.js              # Homepage
├── layout.js            # Root layout
├── globals.css          # Global styles
├── page.module.css      # Homepage styles
├── meals/
│   ├── page.js          # Meals listing
│   ├── share/page.js    # Share meal form
│   └── [mealSlug]/page.js # Meal details
└── community/page.js    # Community page
```

## 🎨 Design System

### Colors
```css
/* Current color scheme */
--background: radial-gradient(#282c34, #282c34)
--primary-gradient: linear-gradient(90deg, #f9572a, #ffc905)
--text-light: #ddd8d8
--text-dark: #262626
```

### Typography
```css
/* Font weights in use */
font-family: "Quicksand", sans-serif; /* Primary */
font-family: "Montserrat", sans-serif; /* Headings */
font-weight: 400, 600, 700, 900;
```

## 🔧 Development Patterns

### Component Pattern
```javascript
// Standard component structure
import classes from './component-name.module.css'
import Image from 'next/image'

const ComponentName = () => {
  return (
    <div className={classes.container}>
      {/* Component content */}
    </div>
  )
}

export default ComponentName
```

### Page Pattern
```javascript
// App Router page pattern
export default function PageName() {
  return (
    <main className={classes.main}>
      <h1>Page Title</h1>
      {/* Page content */}
    </main>
  )
}
```

### Layout Pattern
```javascript
// Layout with metadata
export const metadata = {
  title: "Page Title",
  description: "Page description",
}

export default function Layout({ children }) {
  return (
    <div>
      {children}
    </div>
  )
}
```

## 🚀 Priority Development Areas

### Immediate (Next Sprint)
1. **Meal Management Components**
   - `MealCard` component
   - `MealList` component  
   - Meal data structure
   - Dynamic meal pages

2. **Data Layer**
   - Mock meal data
   - API routes (`/api/meals`)
   - Image optimization strategy

### Short Term (1-2 Sprints)
1. **Share Meal Feature**
   - Form component với validation
   - Image upload handling
   - Server actions cho form submission

2. **Meal Details**
   - Dynamic routing implementation
   - Meal detail component
   - Image gallery/slideshow

### Medium Term (2-4 Sprints)
1. **Community Features**
   - User profiles
   - Comments system
   - Meal ratings

2. **Search & Filter**
   - Meal search functionality
   - Category filtering
   - Sorting options

## 📊 Asset Strategy

### Images
- **Static**: `/public/images/` (8 sample meals)
- **Assets**: `/src/assets/` (logo, icons)
- **Optimization**: Use `next/image` với proper sizing

### Current Sample Meals
- burger.jpg, curry.jpg, dumplings.jpg
- macncheese.jpg, pizza.jpg, schnitzel.jpg
- tomato-salad.jpg

## 🎯 Code Quality Standards

### Naming Conventions
- **Components**: PascalCase (`MainHeader`)
- **Files**: kebab-case (`main-header.js`)
- **CSS Classes**: kebab-case (`header-background`)
- **Functions**: camelCase (`getMealData`)

### CSS Module Pattern
```css
.container {
  /* Main styles */
}

.container .child {
  /* Nested styles */
}

@media (max-width: 768px) {
  .container {
    /* Mobile styles */
  }
}
```

## 🚨 Common Pitfalls to Avoid

1. **Asset Duplication**: Không để images ở cả `/public` và `/src/assets`
2. **Missing Metadata**: Luôn set metadata cho pages
3. **CSS Conflicts**: Sử dụng CSS Modules thay vì global classes
4. **Image Optimization**: Luôn dùng `next/image` thay vì `<img>`
5. **Server Components**: Ưu tiên Server Components trừ khi cần interactivity

## 🔄 Development Workflow

### Scripts
```bash
npm run dev         # Development với Turbopack
npm run build       # Production build
npm run lint        # ESLint check
```

### Git Workflow
- Branch naming: `feature/meal-management`, `fix/header-styling`
- Commit convention: `feat:`, `fix:`, `docs:`, `style:`

## 📈 Performance Considerations

1. **Image Optimization**: Next.js Image với proper dimensions
2. **Font Loading**: Google Fonts với `display=swap`
3. **Code Splitting**: Dynamic imports cho heavy components
4. **CSS Optimization**: CSS Modules auto-optimization

## 🎪 Future Enhancements

1. **State Management**: Context API hoặc Zustand khi cần global state
2. **Authentication**: NextAuth.js cho user management
3. **Database**: Prisma + PostgreSQL cho production data
4. **Testing**: Jest + React Testing Library
5. **Deployment**: Vercel với automatic previews

---

**Note**: Dự án đang trong early stage, ưu tiên hoàn thiện core meal management features trước khi mở rộng tính năng phức tạp.